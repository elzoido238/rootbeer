#!/bin/bash


function fhelp {
    echo "usage: ./configure [--help] [--with-comiper=<compiler>] [--with-debug=<flags>] [--with-optimize=<level>] [--with-default-file=<dirpath>] [--with-default-save=<dirpath>] [--with-default-config=<dirpath>]"
    echo ""
    echo -e "--help\t\t\t\tPrint this help message and exit."
    echo -e "--cxx=<compiler>\tSet compiler [default c++]."
    echo -e "--with-debug=<flags>\t\tSet compiler debug flags [default -ggdb]."
    echo -e "--with-optimize=<level>\t\tSet compiler optimization level [default: 2]."
    echo -e "--with-default-file=<dirpath>\tSet default path for input files (overridden by \$RB_FILEDIR environment variable) [default: ./]."
    echo -e "--with-default-save=<dirpath>\tSet default path for output files (overridden by \$RB_SAVEDIR environment variable) [default: ./]."
    echo -e "--with-default-config=<dirpath>\tSet default path for config files (overridden by \$RB_CONFIGDIR environment variable) [default: ./]."
    echo -e "--with-midas[=<midassys>]\tCompile libRbMidas.so to interface ROOTBEER with the MIDAS data-acquisition system."
    echo -e "\t\t\t\tOptional argument specifies the location of the MIDAS sources [default \$MIDASSYS environment variable]."
    echo -e "\t\t\t\tIf no argument is specified and \$MIDASSYS is not defined, libRbMidas will be compiled for offline"
    echo -e "\t\t\t\tanalysis only, which does not require MIDAS to be installed. To force offline-only compilation, supply"
    echo -e "\t\t\t\t'offline' as the argument."
    exit 0
}

i=1
while [ $i -le $# ]
do
    if [[ "${!i}" == "--help" ]]
    then fhelp
    fi
    i=$((i+1))
done

##
## Check prerequisites
echo "Checking prerequisites... "

echo -n "ROOT installation... "
RC=root-config
ROOTSYS=`$RC --prefix`
if [ -a "$ROOTSYS" ]; then
    echo "$ROOTSYS"
else
    echo -e "\n__Error__: ROOT not installed or $ROOTSYS not set: see http://root.cern.ch for instructions."
    exit 1
fi

echo -n "System... "
UNAME=`uname`
if [ "$UNAME" == "Darwin" ]; then
    echo "$UNAME"
    FPIC=""
    RPATH=""
    DYLIB="-dynamiclib -single_module -undefined dynamic_lookup"
elif [ "$UNAME" == "Linux" ]; then
    echo " $UNAME"
    FPIC="-fPIC"
    RPATH="-Wl,-rpath,${PWD}/lib"
    DYLIB="-shared"
else
    echo -e "\nError: ROOTBEER cannot be configured on your sytem: ${UNAME}."
    exit 1
fi
echo -e  "... Done!\n"

##
## Check options
# CXX=c++
CXX=c++
OPT=-O2
DEBUG=-ggdb
DEFAULTS=""
USE_MIDAS=0
MIDASFLAGS=""
i=1 # loop args
while [ $i -le $# ]; do
    ##
    ## Check compiler
    if [[ "${!i}" == --cxx=* ]]; then
        CXX=`echo "${!i}" | awk -F = '{ print $2}'`
    fi

    ##
    ## Check optimization level
    if [[ "${!i}" == --with-optimize=* ]]; then
        OPT=`echo "${!i}" | awk -F = '{ print $2}'`
        if [[ $OPT < 0 ]]; then
            OPT=0
        elif [[ $OPT > 3 ]]; then
            OPT=3
        fi
        OPT="-O"$OPT
    fi

    ##
    ## Check debug flags
    if [[ "${!i}" == --with-debug=* ]]; then
        DEBUG=${DEBUG}" "`echo "${!i}" | awk -F = '{ print $2}'`
    fi

    #
    # Check default paths
    DEFAULT_FILE=.
    DEFAULT_SAVE=.
    DEFAULT_CONFIG=.
    if [[ "${!i}" == --with-default-file=* ]]; then
        DEFAULT_FILE=`echo "${!i}" | awk -F = '{ print $2}'`
        DEFAULTS="$DEFAULTS -DRB_DEFAULT_FILE_DIRECTORY=$DEFAULT_FILE"
    fi
    if [[ "${!i}" == --with-default-save=* ]]; then
        DEFAULT_SAVE=`echo "${!i}" | awk -F = '{ print $2}'`
        DEFAULTS="$DEFAULTS -DRB_DEFAULT_SAVE_DIRECTORY=$DEFAULT_SAVE"
    fi
    if [[ "${!i}" == --with-default-config=* ]]; then
        DEFAULT_CONFIG=`echo "${!i}" | awk -F = '{ print $2}'`
        DEFAULTS="$DEFAULTS -DRB_DEFAULT_CONFIG_DIRECTORY=$DEFAULT_CONFIG"
    fi

    ##
    ## Check for midas flag
    if [[ "${!i}" == --with-midas* ]]; then
        USE_MIDAS=1
        LOCAL_MIDASSYS=`echo "${!i}" | awk -F = '{ print $2}'`
        if [[ "$LOCAL_MIDASSYS" == "offline" ]]; then
            LOCAL_MIDASSYS=""
        elif [[ "$LOCAL_MIDASSYS" == "" ]]; then
            LOCAL_MIDASSYS="$MIDASSYS"
        fi

        if [[ "$LOCAL_MIDASSYS" != "" ]]; then
            if [ "$UNAME" == "Darwin" ]; then
                MIDASFLAGS="-DOS_DARWIN"
            elif [ "$UNAME" == "Linux" ]; then
                MIDASFLAGS="-DOS_LINUX"
            fi
            MIDASFLAGS=${MIDASFLAGS}" -Dexpname -I$LOCAL_MIDASSYS/include"
        fi
    fi
    #
    # Increase counter
    i=$((i+1))
done

echo "Compilation options..."
echo "Complier... $CXX"
echo "Optimization... $OPT"
echo "Debugging flags... $DEBUG"
echo "Default input file directory... $DEFAULT_FILE"
echo "Default output file directory... $DEFAULT_SAVE"
echo "Default config directory... $DEFAULT_CONFIG"
if [[ USE_MIDAS != 0 ]]; then
    if [[ "$LOCAL_MIDASSYS" != "" ]]
    then echo "Compiling libRbMidas.so using $LOCAL_MIDASSYS"
    else
        echo "Compiling libRbMidas.so for offline analysis only."
    fi
fi

##
## Generate Makefile
echo "##" > config.mk
echo -n "## Makefile generated by configure script on " >> config.mk
echo -e `date` >> config.mk
echo "## Configure options:" >> config.mk
i=1
while [ $i -le $# ]
do
    if [[ $i == 1 ]]
    then echo -n -e "##\t" >> config.mk
    fi
    echo -n ${!i}" " >> config.mk
    i=$((i+1))
done
echo -n -e "\n##\n\n" >> config.mk

SRC=$PWD/src
OBJ=$PWD/obj
CINT=$PWD/cint
RBLIB=$PWD/lib
# ROOTFLAGS=`root-config --cflags`
# ROOTLIBS=`root-config --glibs`" -lXMLParser -lThread -lTreePlayer"

ROOTVERSION=`$RC --version`
ROOTMAJORVERSION=`$RC --version | awk -F. '{print $1}'`
if [ $ROOTMAJORVERSION == 6 ];then
    ROOTCINT=rootcling
else
    ROOTCINT=rootcint
fi

echo "ROOTSYS          = $ROOTSYS" >> config.mk
echo "ROOTVERSION      = $ROOTVERSION" >> config.mk
echo "ROOTMAJORVERSION = $ROOTMAJORVERSION" >> config.mk
echo "ROOTCINT         = $ROOTCINT" >> config.mk
echo "" >> config.mk
echo "### include ROOT Makefile ###" >> config.mk
if [ `which $RC 2>&1 | sed -ne "s@.*/$RC@$RC@p"` == "$RC" ]; then
    MKARCH=`$RC --etcdir`/Makefile.arch
fi
if [ -z ${MKARCH+x} ]; then
    ROOTSYS=`$RC --prefix`
    echo "include \$(ROOTSYS)/etc/Makefile.arch" >> config.mk
else
    echo "include $MKARCH" >> config.mk
fi

echo "" >> config.mk
echo "MAKE_ALL  = \$(RBLIB)/libRootbeer.so" >> config.mk
echo "" >> config.mk

if [ ${USE_MIDAS+x} ]; then
    echo "### Use MIDAS ###" >> config.mk
    echo "MIDASSYS  = $LOCAL_MIDASSYS" >> config.mk
    echo "MAKE_ALL += \$(RBLIB)/librbMidas.so" >> config.mk
fi



# if [ $LOCAL_MIDASSYS

#      CXXFLAGS="$DEBUG $OPT -I$SRC $ROOTFLAGS $DEFAULTS"
#      LDFLAGS="${DYLIB} ${FPIC} ${RPATH}"
#      LIBS="$ROOTLIBS -L$RBLIB"

#      #echo $CXXFLAGS
#      #echo $LDFLAGS
#      #echo $LIBS

#      SOURCES=`find src -name "*.cxx" | grep -v "midas"`
#      OBJECTS=`echo $SOURCES | sed s/.cxx/.o/g`
#      OBJECTS=`echo $OBJECTS | sed s/src/obj/g`
#      HEADERS=`find src -name "*.h*" | grep -v -e "midas" -e "boost"`

#      OBJDIRS="src/ "`ls -d -- src/*/ | grep -v -e "midas" -e "boost"`
#      OBJDIRS=`echo $OBJDIRS | sed s/src/'mkdir obj'/g | sed s/'\/ '/'; '/g`
#      #echo $OBJECTS
#      #echo $HEADERS


#      echo "RBlib: $RBLIB/libRootbeer.so" >> config.mk
#      # echo "$RBLIB/libRootbeer.so: $CINT/RBDictionary.cxx $OBJECTS"
#      # echo -e "\t$CXX $LDFLAGS $OBJECTS $CINT/RBDictionary.cxx $LIBS \
#          # -o $@ \
#          #" >> config.mk

#      # $(OBJ)/midas/%.o: $(SRC)/midas/%.cxx $(CINT)/MidasDict.cxx
#      #   $(CXX) $(FPIC) $(MIDASFLAGS) -c $< \
#          # -o $@  \

#      # $(OBJ)/%.o: $(SRC)/%.cxx $(CINT)/RBDictionary.cxx
#      #   $(CXX) $(FPIC) -c $< \
#          # -o $@  \
#          echo $OBJDIRS
